// Code generated by Prisma (prisma@1.34.8). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateChildcareProvider {
  count: Int!
}

type AggregateEmployer {
  count: Int!
}

type AggregateLoan {
  count: Int!
}

type AggregatePaymentRequest {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateVerificationToken {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type ChildcareProvider {
  id: ID!
  email: String!
  companyNumber: String!
  mangoLegalUserID: String
  approved: Boolean!
  paymentRequests(where: PaymentRequestWhereInput, orderBy: PaymentRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PaymentRequest!]
  expiresAt: DateTime
  updatedAt: DateTime!
  createdAt: DateTime!
}

type ChildcareProviderConnection {
  pageInfo: PageInfo!
  edges: [ChildcareProviderEdge]!
  aggregate: AggregateChildcareProvider!
}

input ChildcareProviderCreateInput {
  id: ID
  email: String!
  companyNumber: String!
  mangoLegalUserID: String
  approved: Boolean
  paymentRequests: PaymentRequestCreateManyWithoutChildcareProviderInput
  expiresAt: DateTime
}

input ChildcareProviderCreateOneWithoutPaymentRequestsInput {
  create: ChildcareProviderCreateWithoutPaymentRequestsInput
  connect: ChildcareProviderWhereUniqueInput
}

input ChildcareProviderCreateWithoutPaymentRequestsInput {
  id: ID
  email: String!
  companyNumber: String!
  mangoLegalUserID: String
  approved: Boolean
  expiresAt: DateTime
}

type ChildcareProviderEdge {
  node: ChildcareProvider!
  cursor: String!
}

enum ChildcareProviderOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  companyNumber_ASC
  companyNumber_DESC
  mangoLegalUserID_ASC
  mangoLegalUserID_DESC
  approved_ASC
  approved_DESC
  expiresAt_ASC
  expiresAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ChildcareProviderPreviousValues {
  id: ID!
  email: String!
  companyNumber: String!
  mangoLegalUserID: String
  approved: Boolean!
  expiresAt: DateTime
  updatedAt: DateTime!
  createdAt: DateTime!
}

type ChildcareProviderSubscriptionPayload {
  mutation: MutationType!
  node: ChildcareProvider
  updatedFields: [String!]
  previousValues: ChildcareProviderPreviousValues
}

input ChildcareProviderSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ChildcareProviderWhereInput
  AND: [ChildcareProviderSubscriptionWhereInput!]
  OR: [ChildcareProviderSubscriptionWhereInput!]
  NOT: [ChildcareProviderSubscriptionWhereInput!]
}

input ChildcareProviderUpdateInput {
  email: String
  companyNumber: String
  mangoLegalUserID: String
  approved: Boolean
  paymentRequests: PaymentRequestUpdateManyWithoutChildcareProviderInput
  expiresAt: DateTime
}

input ChildcareProviderUpdateManyMutationInput {
  email: String
  companyNumber: String
  mangoLegalUserID: String
  approved: Boolean
  expiresAt: DateTime
}

input ChildcareProviderUpdateOneRequiredWithoutPaymentRequestsInput {
  create: ChildcareProviderCreateWithoutPaymentRequestsInput
  update: ChildcareProviderUpdateWithoutPaymentRequestsDataInput
  upsert: ChildcareProviderUpsertWithoutPaymentRequestsInput
  connect: ChildcareProviderWhereUniqueInput
}

input ChildcareProviderUpdateWithoutPaymentRequestsDataInput {
  email: String
  companyNumber: String
  mangoLegalUserID: String
  approved: Boolean
  expiresAt: DateTime
}

input ChildcareProviderUpsertWithoutPaymentRequestsInput {
  update: ChildcareProviderUpdateWithoutPaymentRequestsDataInput!
  create: ChildcareProviderCreateWithoutPaymentRequestsInput!
}

input ChildcareProviderWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  companyNumber: String
  companyNumber_not: String
  companyNumber_in: [String!]
  companyNumber_not_in: [String!]
  companyNumber_lt: String
  companyNumber_lte: String
  companyNumber_gt: String
  companyNumber_gte: String
  companyNumber_contains: String
  companyNumber_not_contains: String
  companyNumber_starts_with: String
  companyNumber_not_starts_with: String
  companyNumber_ends_with: String
  companyNumber_not_ends_with: String
  mangoLegalUserID: String
  mangoLegalUserID_not: String
  mangoLegalUserID_in: [String!]
  mangoLegalUserID_not_in: [String!]
  mangoLegalUserID_lt: String
  mangoLegalUserID_lte: String
  mangoLegalUserID_gt: String
  mangoLegalUserID_gte: String
  mangoLegalUserID_contains: String
  mangoLegalUserID_not_contains: String
  mangoLegalUserID_starts_with: String
  mangoLegalUserID_not_starts_with: String
  mangoLegalUserID_ends_with: String
  mangoLegalUserID_not_ends_with: String
  approved: Boolean
  approved_not: Boolean
  paymentRequests_every: PaymentRequestWhereInput
  paymentRequests_some: PaymentRequestWhereInput
  paymentRequests_none: PaymentRequestWhereInput
  expiresAt: DateTime
  expiresAt_not: DateTime
  expiresAt_in: [DateTime!]
  expiresAt_not_in: [DateTime!]
  expiresAt_lt: DateTime
  expiresAt_lte: DateTime
  expiresAt_gt: DateTime
  expiresAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [ChildcareProviderWhereInput!]
  OR: [ChildcareProviderWhereInput!]
  NOT: [ChildcareProviderWhereInput!]
}

input ChildcareProviderWhereUniqueInput {
  id: ID
  email: String
  companyNumber: String
  mangoLegalUserID: String
}

scalar DateTime

type Employer {
  id: ID!
  name: String!
  slug: String!
  address: String!
  companyNumber: String
  user(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  emailSuffix: String!
  maximumAmount: Float!
  minimumServiceLength: Int!
  maxSalaryPercentage: Float!
  payrollEmail: String!
  signerEmail: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type EmployerConnection {
  pageInfo: PageInfo!
  edges: [EmployerEdge]!
  aggregate: AggregateEmployer!
}

input EmployerCreateInput {
  id: ID
  name: String!
  slug: String!
  address: String!
  companyNumber: String
  user: UserCreateManyWithoutEmployerInput
  emailSuffix: String!
  maximumAmount: Float!
  minimumServiceLength: Int!
  maxSalaryPercentage: Float!
  payrollEmail: String!
  signerEmail: String!
}

input EmployerCreateOneWithoutUserInput {
  create: EmployerCreateWithoutUserInput
  connect: EmployerWhereUniqueInput
}

input EmployerCreateWithoutUserInput {
  id: ID
  name: String!
  slug: String!
  address: String!
  companyNumber: String
  emailSuffix: String!
  maximumAmount: Float!
  minimumServiceLength: Int!
  maxSalaryPercentage: Float!
  payrollEmail: String!
  signerEmail: String!
}

type EmployerEdge {
  node: Employer!
  cursor: String!
}

enum EmployerOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  slug_ASC
  slug_DESC
  address_ASC
  address_DESC
  companyNumber_ASC
  companyNumber_DESC
  emailSuffix_ASC
  emailSuffix_DESC
  maximumAmount_ASC
  maximumAmount_DESC
  minimumServiceLength_ASC
  minimumServiceLength_DESC
  maxSalaryPercentage_ASC
  maxSalaryPercentage_DESC
  payrollEmail_ASC
  payrollEmail_DESC
  signerEmail_ASC
  signerEmail_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type EmployerPreviousValues {
  id: ID!
  name: String!
  slug: String!
  address: String!
  companyNumber: String
  emailSuffix: String!
  maximumAmount: Float!
  minimumServiceLength: Int!
  maxSalaryPercentage: Float!
  payrollEmail: String!
  signerEmail: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type EmployerSubscriptionPayload {
  mutation: MutationType!
  node: Employer
  updatedFields: [String!]
  previousValues: EmployerPreviousValues
}

input EmployerSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EmployerWhereInput
  AND: [EmployerSubscriptionWhereInput!]
  OR: [EmployerSubscriptionWhereInput!]
  NOT: [EmployerSubscriptionWhereInput!]
}

input EmployerUpdateInput {
  name: String
  slug: String
  address: String
  companyNumber: String
  user: UserUpdateManyWithoutEmployerInput
  emailSuffix: String
  maximumAmount: Float
  minimumServiceLength: Int
  maxSalaryPercentage: Float
  payrollEmail: String
  signerEmail: String
}

input EmployerUpdateManyMutationInput {
  name: String
  slug: String
  address: String
  companyNumber: String
  emailSuffix: String
  maximumAmount: Float
  minimumServiceLength: Int
  maxSalaryPercentage: Float
  payrollEmail: String
  signerEmail: String
}

input EmployerUpdateOneRequiredWithoutUserInput {
  create: EmployerCreateWithoutUserInput
  update: EmployerUpdateWithoutUserDataInput
  upsert: EmployerUpsertWithoutUserInput
  connect: EmployerWhereUniqueInput
}

input EmployerUpdateWithoutUserDataInput {
  name: String
  slug: String
  address: String
  companyNumber: String
  emailSuffix: String
  maximumAmount: Float
  minimumServiceLength: Int
  maxSalaryPercentage: Float
  payrollEmail: String
  signerEmail: String
}

input EmployerUpsertWithoutUserInput {
  update: EmployerUpdateWithoutUserDataInput!
  create: EmployerCreateWithoutUserInput!
}

input EmployerWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  companyNumber: String
  companyNumber_not: String
  companyNumber_in: [String!]
  companyNumber_not_in: [String!]
  companyNumber_lt: String
  companyNumber_lte: String
  companyNumber_gt: String
  companyNumber_gte: String
  companyNumber_contains: String
  companyNumber_not_contains: String
  companyNumber_starts_with: String
  companyNumber_not_starts_with: String
  companyNumber_ends_with: String
  companyNumber_not_ends_with: String
  user_every: UserWhereInput
  user_some: UserWhereInput
  user_none: UserWhereInput
  emailSuffix: String
  emailSuffix_not: String
  emailSuffix_in: [String!]
  emailSuffix_not_in: [String!]
  emailSuffix_lt: String
  emailSuffix_lte: String
  emailSuffix_gt: String
  emailSuffix_gte: String
  emailSuffix_contains: String
  emailSuffix_not_contains: String
  emailSuffix_starts_with: String
  emailSuffix_not_starts_with: String
  emailSuffix_ends_with: String
  emailSuffix_not_ends_with: String
  maximumAmount: Float
  maximumAmount_not: Float
  maximumAmount_in: [Float!]
  maximumAmount_not_in: [Float!]
  maximumAmount_lt: Float
  maximumAmount_lte: Float
  maximumAmount_gt: Float
  maximumAmount_gte: Float
  minimumServiceLength: Int
  minimumServiceLength_not: Int
  minimumServiceLength_in: [Int!]
  minimumServiceLength_not_in: [Int!]
  minimumServiceLength_lt: Int
  minimumServiceLength_lte: Int
  minimumServiceLength_gt: Int
  minimumServiceLength_gte: Int
  maxSalaryPercentage: Float
  maxSalaryPercentage_not: Float
  maxSalaryPercentage_in: [Float!]
  maxSalaryPercentage_not_in: [Float!]
  maxSalaryPercentage_lt: Float
  maxSalaryPercentage_lte: Float
  maxSalaryPercentage_gt: Float
  maxSalaryPercentage_gte: Float
  payrollEmail: String
  payrollEmail_not: String
  payrollEmail_in: [String!]
  payrollEmail_not_in: [String!]
  payrollEmail_lt: String
  payrollEmail_lte: String
  payrollEmail_gt: String
  payrollEmail_gte: String
  payrollEmail_contains: String
  payrollEmail_not_contains: String
  payrollEmail_starts_with: String
  payrollEmail_not_starts_with: String
  payrollEmail_ends_with: String
  payrollEmail_not_ends_with: String
  signerEmail: String
  signerEmail_not: String
  signerEmail_in: [String!]
  signerEmail_not_in: [String!]
  signerEmail_lt: String
  signerEmail_lte: String
  signerEmail_gt: String
  signerEmail_gte: String
  signerEmail_contains: String
  signerEmail_not_contains: String
  signerEmail_starts_with: String
  signerEmail_not_starts_with: String
  signerEmail_ends_with: String
  signerEmail_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [EmployerWhereInput!]
  OR: [EmployerWhereInput!]
  NOT: [EmployerWhereInput!]
}

input EmployerWhereUniqueInput {
  id: ID
  slug: String
  companyNumber: String
  emailSuffix: String
}

type Loan {
  id: ID!
  amount: Float!
  terms: Int!
  approved: Boolean!
  agreementURL: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

type LoanConnection {
  pageInfo: PageInfo!
  edges: [LoanEdge]!
  aggregate: AggregateLoan!
}

input LoanCreateInput {
  id: ID
  amount: Float!
  terms: Int!
  approved: Boolean
  agreementURL: String
}

input LoanCreateOneInput {
  create: LoanCreateInput
  connect: LoanWhereUniqueInput
}

type LoanEdge {
  node: Loan!
  cursor: String!
}

enum LoanOrderByInput {
  id_ASC
  id_DESC
  amount_ASC
  amount_DESC
  terms_ASC
  terms_DESC
  approved_ASC
  approved_DESC
  agreementURL_ASC
  agreementURL_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type LoanPreviousValues {
  id: ID!
  amount: Float!
  terms: Int!
  approved: Boolean!
  agreementURL: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

type LoanSubscriptionPayload {
  mutation: MutationType!
  node: Loan
  updatedFields: [String!]
  previousValues: LoanPreviousValues
}

input LoanSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LoanWhereInput
  AND: [LoanSubscriptionWhereInput!]
  OR: [LoanSubscriptionWhereInput!]
  NOT: [LoanSubscriptionWhereInput!]
}

input LoanUpdateDataInput {
  amount: Float
  terms: Int
  approved: Boolean
  agreementURL: String
}

input LoanUpdateInput {
  amount: Float
  terms: Int
  approved: Boolean
  agreementURL: String
}

input LoanUpdateManyMutationInput {
  amount: Float
  terms: Int
  approved: Boolean
  agreementURL: String
}

input LoanUpdateOneInput {
  create: LoanCreateInput
  update: LoanUpdateDataInput
  upsert: LoanUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: LoanWhereUniqueInput
}

input LoanUpsertNestedInput {
  update: LoanUpdateDataInput!
  create: LoanCreateInput!
}

input LoanWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  amount: Float
  amount_not: Float
  amount_in: [Float!]
  amount_not_in: [Float!]
  amount_lt: Float
  amount_lte: Float
  amount_gt: Float
  amount_gte: Float
  terms: Int
  terms_not: Int
  terms_in: [Int!]
  terms_not_in: [Int!]
  terms_lt: Int
  terms_lte: Int
  terms_gt: Int
  terms_gte: Int
  approved: Boolean
  approved_not: Boolean
  agreementURL: String
  agreementURL_not: String
  agreementURL_in: [String!]
  agreementURL_not_in: [String!]
  agreementURL_lt: String
  agreementURL_lte: String
  agreementURL_gt: String
  agreementURL_gte: String
  agreementURL_contains: String
  agreementURL_not_contains: String
  agreementURL_starts_with: String
  agreementURL_not_starts_with: String
  agreementURL_ends_with: String
  agreementURL_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [LoanWhereInput!]
  OR: [LoanWhereInput!]
  NOT: [LoanWhereInput!]
}

input LoanWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createChildcareProvider(data: ChildcareProviderCreateInput!): ChildcareProvider!
  updateChildcareProvider(data: ChildcareProviderUpdateInput!, where: ChildcareProviderWhereUniqueInput!): ChildcareProvider
  updateManyChildcareProviders(data: ChildcareProviderUpdateManyMutationInput!, where: ChildcareProviderWhereInput): BatchPayload!
  upsertChildcareProvider(where: ChildcareProviderWhereUniqueInput!, create: ChildcareProviderCreateInput!, update: ChildcareProviderUpdateInput!): ChildcareProvider!
  deleteChildcareProvider(where: ChildcareProviderWhereUniqueInput!): ChildcareProvider
  deleteManyChildcareProviders(where: ChildcareProviderWhereInput): BatchPayload!
  createEmployer(data: EmployerCreateInput!): Employer!
  updateEmployer(data: EmployerUpdateInput!, where: EmployerWhereUniqueInput!): Employer
  updateManyEmployers(data: EmployerUpdateManyMutationInput!, where: EmployerWhereInput): BatchPayload!
  upsertEmployer(where: EmployerWhereUniqueInput!, create: EmployerCreateInput!, update: EmployerUpdateInput!): Employer!
  deleteEmployer(where: EmployerWhereUniqueInput!): Employer
  deleteManyEmployers(where: EmployerWhereInput): BatchPayload!
  createLoan(data: LoanCreateInput!): Loan!
  updateLoan(data: LoanUpdateInput!, where: LoanWhereUniqueInput!): Loan
  updateManyLoans(data: LoanUpdateManyMutationInput!, where: LoanWhereInput): BatchPayload!
  upsertLoan(where: LoanWhereUniqueInput!, create: LoanCreateInput!, update: LoanUpdateInput!): Loan!
  deleteLoan(where: LoanWhereUniqueInput!): Loan
  deleteManyLoans(where: LoanWhereInput): BatchPayload!
  createPaymentRequest(data: PaymentRequestCreateInput!): PaymentRequest!
  updatePaymentRequest(data: PaymentRequestUpdateInput!, where: PaymentRequestWhereUniqueInput!): PaymentRequest
  updateManyPaymentRequests(data: PaymentRequestUpdateManyMutationInput!, where: PaymentRequestWhereInput): BatchPayload!
  upsertPaymentRequest(where: PaymentRequestWhereUniqueInput!, create: PaymentRequestCreateInput!, update: PaymentRequestUpdateInput!): PaymentRequest!
  deletePaymentRequest(where: PaymentRequestWhereUniqueInput!): PaymentRequest
  deleteManyPaymentRequests(where: PaymentRequestWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createVerificationToken(data: VerificationTokenCreateInput!): VerificationToken!
  updateVerificationToken(data: VerificationTokenUpdateInput!, where: VerificationTokenWhereUniqueInput!): VerificationToken
  updateManyVerificationTokens(data: VerificationTokenUpdateManyMutationInput!, where: VerificationTokenWhereInput): BatchPayload!
  upsertVerificationToken(where: VerificationTokenWhereUniqueInput!, create: VerificationTokenCreateInput!, update: VerificationTokenUpdateInput!): VerificationToken!
  deleteVerificationToken(where: VerificationTokenWhereUniqueInput!): VerificationToken
  deleteManyVerificationTokens(where: VerificationTokenWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type PaymentRequest {
  id: ID!
  mangoPaymentID: String
  user: User!
  childcareProvider: ChildcareProvider!
  amountToPay: Float!
  consentToPay: Boolean!
  reference: String
  expiresAt: DateTime
  updatedAt: DateTime!
  createdAt: DateTime!
}

type PaymentRequestConnection {
  pageInfo: PageInfo!
  edges: [PaymentRequestEdge]!
  aggregate: AggregatePaymentRequest!
}

input PaymentRequestCreateInput {
  id: ID
  mangoPaymentID: String
  user: UserCreateOneWithoutPaymentRequestsInput!
  childcareProvider: ChildcareProviderCreateOneWithoutPaymentRequestsInput!
  amountToPay: Float!
  consentToPay: Boolean
  reference: String
  expiresAt: DateTime
}

input PaymentRequestCreateManyWithoutChildcareProviderInput {
  create: [PaymentRequestCreateWithoutChildcareProviderInput!]
  connect: [PaymentRequestWhereUniqueInput!]
}

input PaymentRequestCreateManyWithoutUserInput {
  create: [PaymentRequestCreateWithoutUserInput!]
  connect: [PaymentRequestWhereUniqueInput!]
}

input PaymentRequestCreateWithoutChildcareProviderInput {
  id: ID
  mangoPaymentID: String
  user: UserCreateOneWithoutPaymentRequestsInput!
  amountToPay: Float!
  consentToPay: Boolean
  reference: String
  expiresAt: DateTime
}

input PaymentRequestCreateWithoutUserInput {
  id: ID
  mangoPaymentID: String
  childcareProvider: ChildcareProviderCreateOneWithoutPaymentRequestsInput!
  amountToPay: Float!
  consentToPay: Boolean
  reference: String
  expiresAt: DateTime
}

type PaymentRequestEdge {
  node: PaymentRequest!
  cursor: String!
}

enum PaymentRequestOrderByInput {
  id_ASC
  id_DESC
  mangoPaymentID_ASC
  mangoPaymentID_DESC
  amountToPay_ASC
  amountToPay_DESC
  consentToPay_ASC
  consentToPay_DESC
  reference_ASC
  reference_DESC
  expiresAt_ASC
  expiresAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PaymentRequestPreviousValues {
  id: ID!
  mangoPaymentID: String
  amountToPay: Float!
  consentToPay: Boolean!
  reference: String
  expiresAt: DateTime
  updatedAt: DateTime!
  createdAt: DateTime!
}

input PaymentRequestScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  mangoPaymentID: String
  mangoPaymentID_not: String
  mangoPaymentID_in: [String!]
  mangoPaymentID_not_in: [String!]
  mangoPaymentID_lt: String
  mangoPaymentID_lte: String
  mangoPaymentID_gt: String
  mangoPaymentID_gte: String
  mangoPaymentID_contains: String
  mangoPaymentID_not_contains: String
  mangoPaymentID_starts_with: String
  mangoPaymentID_not_starts_with: String
  mangoPaymentID_ends_with: String
  mangoPaymentID_not_ends_with: String
  amountToPay: Float
  amountToPay_not: Float
  amountToPay_in: [Float!]
  amountToPay_not_in: [Float!]
  amountToPay_lt: Float
  amountToPay_lte: Float
  amountToPay_gt: Float
  amountToPay_gte: Float
  consentToPay: Boolean
  consentToPay_not: Boolean
  reference: String
  reference_not: String
  reference_in: [String!]
  reference_not_in: [String!]
  reference_lt: String
  reference_lte: String
  reference_gt: String
  reference_gte: String
  reference_contains: String
  reference_not_contains: String
  reference_starts_with: String
  reference_not_starts_with: String
  reference_ends_with: String
  reference_not_ends_with: String
  expiresAt: DateTime
  expiresAt_not: DateTime
  expiresAt_in: [DateTime!]
  expiresAt_not_in: [DateTime!]
  expiresAt_lt: DateTime
  expiresAt_lte: DateTime
  expiresAt_gt: DateTime
  expiresAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [PaymentRequestScalarWhereInput!]
  OR: [PaymentRequestScalarWhereInput!]
  NOT: [PaymentRequestScalarWhereInput!]
}

type PaymentRequestSubscriptionPayload {
  mutation: MutationType!
  node: PaymentRequest
  updatedFields: [String!]
  previousValues: PaymentRequestPreviousValues
}

input PaymentRequestSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PaymentRequestWhereInput
  AND: [PaymentRequestSubscriptionWhereInput!]
  OR: [PaymentRequestSubscriptionWhereInput!]
  NOT: [PaymentRequestSubscriptionWhereInput!]
}

input PaymentRequestUpdateInput {
  mangoPaymentID: String
  user: UserUpdateOneRequiredWithoutPaymentRequestsInput
  childcareProvider: ChildcareProviderUpdateOneRequiredWithoutPaymentRequestsInput
  amountToPay: Float
  consentToPay: Boolean
  reference: String
  expiresAt: DateTime
}

input PaymentRequestUpdateManyDataInput {
  mangoPaymentID: String
  amountToPay: Float
  consentToPay: Boolean
  reference: String
  expiresAt: DateTime
}

input PaymentRequestUpdateManyMutationInput {
  mangoPaymentID: String
  amountToPay: Float
  consentToPay: Boolean
  reference: String
  expiresAt: DateTime
}

input PaymentRequestUpdateManyWithoutChildcareProviderInput {
  create: [PaymentRequestCreateWithoutChildcareProviderInput!]
  delete: [PaymentRequestWhereUniqueInput!]
  connect: [PaymentRequestWhereUniqueInput!]
  set: [PaymentRequestWhereUniqueInput!]
  disconnect: [PaymentRequestWhereUniqueInput!]
  update: [PaymentRequestUpdateWithWhereUniqueWithoutChildcareProviderInput!]
  upsert: [PaymentRequestUpsertWithWhereUniqueWithoutChildcareProviderInput!]
  deleteMany: [PaymentRequestScalarWhereInput!]
  updateMany: [PaymentRequestUpdateManyWithWhereNestedInput!]
}

input PaymentRequestUpdateManyWithoutUserInput {
  create: [PaymentRequestCreateWithoutUserInput!]
  delete: [PaymentRequestWhereUniqueInput!]
  connect: [PaymentRequestWhereUniqueInput!]
  set: [PaymentRequestWhereUniqueInput!]
  disconnect: [PaymentRequestWhereUniqueInput!]
  update: [PaymentRequestUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [PaymentRequestUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [PaymentRequestScalarWhereInput!]
  updateMany: [PaymentRequestUpdateManyWithWhereNestedInput!]
}

input PaymentRequestUpdateManyWithWhereNestedInput {
  where: PaymentRequestScalarWhereInput!
  data: PaymentRequestUpdateManyDataInput!
}

input PaymentRequestUpdateWithoutChildcareProviderDataInput {
  mangoPaymentID: String
  user: UserUpdateOneRequiredWithoutPaymentRequestsInput
  amountToPay: Float
  consentToPay: Boolean
  reference: String
  expiresAt: DateTime
}

input PaymentRequestUpdateWithoutUserDataInput {
  mangoPaymentID: String
  childcareProvider: ChildcareProviderUpdateOneRequiredWithoutPaymentRequestsInput
  amountToPay: Float
  consentToPay: Boolean
  reference: String
  expiresAt: DateTime
}

input PaymentRequestUpdateWithWhereUniqueWithoutChildcareProviderInput {
  where: PaymentRequestWhereUniqueInput!
  data: PaymentRequestUpdateWithoutChildcareProviderDataInput!
}

input PaymentRequestUpdateWithWhereUniqueWithoutUserInput {
  where: PaymentRequestWhereUniqueInput!
  data: PaymentRequestUpdateWithoutUserDataInput!
}

input PaymentRequestUpsertWithWhereUniqueWithoutChildcareProviderInput {
  where: PaymentRequestWhereUniqueInput!
  update: PaymentRequestUpdateWithoutChildcareProviderDataInput!
  create: PaymentRequestCreateWithoutChildcareProviderInput!
}

input PaymentRequestUpsertWithWhereUniqueWithoutUserInput {
  where: PaymentRequestWhereUniqueInput!
  update: PaymentRequestUpdateWithoutUserDataInput!
  create: PaymentRequestCreateWithoutUserInput!
}

input PaymentRequestWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  mangoPaymentID: String
  mangoPaymentID_not: String
  mangoPaymentID_in: [String!]
  mangoPaymentID_not_in: [String!]
  mangoPaymentID_lt: String
  mangoPaymentID_lte: String
  mangoPaymentID_gt: String
  mangoPaymentID_gte: String
  mangoPaymentID_contains: String
  mangoPaymentID_not_contains: String
  mangoPaymentID_starts_with: String
  mangoPaymentID_not_starts_with: String
  mangoPaymentID_ends_with: String
  mangoPaymentID_not_ends_with: String
  user: UserWhereInput
  childcareProvider: ChildcareProviderWhereInput
  amountToPay: Float
  amountToPay_not: Float
  amountToPay_in: [Float!]
  amountToPay_not_in: [Float!]
  amountToPay_lt: Float
  amountToPay_lte: Float
  amountToPay_gt: Float
  amountToPay_gte: Float
  consentToPay: Boolean
  consentToPay_not: Boolean
  reference: String
  reference_not: String
  reference_in: [String!]
  reference_not_in: [String!]
  reference_lt: String
  reference_lte: String
  reference_gt: String
  reference_gte: String
  reference_contains: String
  reference_not_contains: String
  reference_starts_with: String
  reference_not_starts_with: String
  reference_ends_with: String
  reference_not_ends_with: String
  expiresAt: DateTime
  expiresAt_not: DateTime
  expiresAt_in: [DateTime!]
  expiresAt_not_in: [DateTime!]
  expiresAt_lt: DateTime
  expiresAt_lte: DateTime
  expiresAt_gt: DateTime
  expiresAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [PaymentRequestWhereInput!]
  OR: [PaymentRequestWhereInput!]
  NOT: [PaymentRequestWhereInput!]
}

input PaymentRequestWhereUniqueInput {
  id: ID
  mangoPaymentID: String
}

type Query {
  childcareProvider(where: ChildcareProviderWhereUniqueInput!): ChildcareProvider
  childcareProviders(where: ChildcareProviderWhereInput, orderBy: ChildcareProviderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ChildcareProvider]!
  childcareProvidersConnection(where: ChildcareProviderWhereInput, orderBy: ChildcareProviderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChildcareProviderConnection!
  employer(where: EmployerWhereUniqueInput!): Employer
  employers(where: EmployerWhereInput, orderBy: EmployerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Employer]!
  employersConnection(where: EmployerWhereInput, orderBy: EmployerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EmployerConnection!
  loan(where: LoanWhereUniqueInput!): Loan
  loans(where: LoanWhereInput, orderBy: LoanOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Loan]!
  loansConnection(where: LoanWhereInput, orderBy: LoanOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LoanConnection!
  paymentRequest(where: PaymentRequestWhereUniqueInput!): PaymentRequest
  paymentRequests(where: PaymentRequestWhereInput, orderBy: PaymentRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PaymentRequest]!
  paymentRequestsConnection(where: PaymentRequestWhereInput, orderBy: PaymentRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PaymentRequestConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  verificationToken(where: VerificationTokenWhereUniqueInput!): VerificationToken
  verificationTokens(where: VerificationTokenWhereInput, orderBy: VerificationTokenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [VerificationToken]!
  verificationTokensConnection(where: VerificationTokenWhereInput, orderBy: VerificationTokenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VerificationTokenConnection!
  node(id: ID!): Node
}

type Subscription {
  childcareProvider(where: ChildcareProviderSubscriptionWhereInput): ChildcareProviderSubscriptionPayload
  employer(where: EmployerSubscriptionWhereInput): EmployerSubscriptionPayload
  loan(where: LoanSubscriptionWhereInput): LoanSubscriptionPayload
  paymentRequest(where: PaymentRequestSubscriptionWhereInput): PaymentRequestSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  verificationToken(where: VerificationTokenSubscriptionWhereInput): VerificationTokenSubscriptionPayload
}

type User {
  id: ID!
  employer: Employer!
  firstName: String!
  lastName: String!
  email: String!
  isVerified: Boolean!
  phoneNumber: String!
  dob: DateTime!
  nationality: String!
  employmentStartDate: DateTime!
  annualSalary: Float!
  employeeID: String
  verificationToken: VerificationToken
  gdprConsent: Boolean!
  loan: Loan
  mangoWalletId: String
  mangoUserId: String
  paymentRequests(where: PaymentRequestWhereInput, orderBy: PaymentRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PaymentRequest!]
  updatedAt: DateTime!
  createdAt: DateTime!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  employer: EmployerCreateOneWithoutUserInput!
  firstName: String!
  lastName: String!
  email: String!
  isVerified: Boolean
  phoneNumber: String!
  dob: DateTime!
  nationality: String!
  employmentStartDate: DateTime!
  annualSalary: Float!
  employeeID: String
  verificationToken: VerificationTokenCreateOneInput
  gdprConsent: Boolean!
  loan: LoanCreateOneInput
  mangoWalletId: String
  mangoUserId: String
  paymentRequests: PaymentRequestCreateManyWithoutUserInput
}

input UserCreateManyWithoutEmployerInput {
  create: [UserCreateWithoutEmployerInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutPaymentRequestsInput {
  create: UserCreateWithoutPaymentRequestsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutEmployerInput {
  id: ID
  firstName: String!
  lastName: String!
  email: String!
  isVerified: Boolean
  phoneNumber: String!
  dob: DateTime!
  nationality: String!
  employmentStartDate: DateTime!
  annualSalary: Float!
  employeeID: String
  verificationToken: VerificationTokenCreateOneInput
  gdprConsent: Boolean!
  loan: LoanCreateOneInput
  mangoWalletId: String
  mangoUserId: String
  paymentRequests: PaymentRequestCreateManyWithoutUserInput
}

input UserCreateWithoutPaymentRequestsInput {
  id: ID
  employer: EmployerCreateOneWithoutUserInput!
  firstName: String!
  lastName: String!
  email: String!
  isVerified: Boolean
  phoneNumber: String!
  dob: DateTime!
  nationality: String!
  employmentStartDate: DateTime!
  annualSalary: Float!
  employeeID: String
  verificationToken: VerificationTokenCreateOneInput
  gdprConsent: Boolean!
  loan: LoanCreateOneInput
  mangoWalletId: String
  mangoUserId: String
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  email_ASC
  email_DESC
  isVerified_ASC
  isVerified_DESC
  phoneNumber_ASC
  phoneNumber_DESC
  dob_ASC
  dob_DESC
  nationality_ASC
  nationality_DESC
  employmentStartDate_ASC
  employmentStartDate_DESC
  annualSalary_ASC
  annualSalary_DESC
  employeeID_ASC
  employeeID_DESC
  gdprConsent_ASC
  gdprConsent_DESC
  mangoWalletId_ASC
  mangoWalletId_DESC
  mangoUserId_ASC
  mangoUserId_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  isVerified: Boolean!
  phoneNumber: String!
  dob: DateTime!
  nationality: String!
  employmentStartDate: DateTime!
  annualSalary: Float!
  employeeID: String
  gdprConsent: Boolean!
  mangoWalletId: String
  mangoUserId: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  isVerified: Boolean
  isVerified_not: Boolean
  phoneNumber: String
  phoneNumber_not: String
  phoneNumber_in: [String!]
  phoneNumber_not_in: [String!]
  phoneNumber_lt: String
  phoneNumber_lte: String
  phoneNumber_gt: String
  phoneNumber_gte: String
  phoneNumber_contains: String
  phoneNumber_not_contains: String
  phoneNumber_starts_with: String
  phoneNumber_not_starts_with: String
  phoneNumber_ends_with: String
  phoneNumber_not_ends_with: String
  dob: DateTime
  dob_not: DateTime
  dob_in: [DateTime!]
  dob_not_in: [DateTime!]
  dob_lt: DateTime
  dob_lte: DateTime
  dob_gt: DateTime
  dob_gte: DateTime
  nationality: String
  nationality_not: String
  nationality_in: [String!]
  nationality_not_in: [String!]
  nationality_lt: String
  nationality_lte: String
  nationality_gt: String
  nationality_gte: String
  nationality_contains: String
  nationality_not_contains: String
  nationality_starts_with: String
  nationality_not_starts_with: String
  nationality_ends_with: String
  nationality_not_ends_with: String
  employmentStartDate: DateTime
  employmentStartDate_not: DateTime
  employmentStartDate_in: [DateTime!]
  employmentStartDate_not_in: [DateTime!]
  employmentStartDate_lt: DateTime
  employmentStartDate_lte: DateTime
  employmentStartDate_gt: DateTime
  employmentStartDate_gte: DateTime
  annualSalary: Float
  annualSalary_not: Float
  annualSalary_in: [Float!]
  annualSalary_not_in: [Float!]
  annualSalary_lt: Float
  annualSalary_lte: Float
  annualSalary_gt: Float
  annualSalary_gte: Float
  employeeID: String
  employeeID_not: String
  employeeID_in: [String!]
  employeeID_not_in: [String!]
  employeeID_lt: String
  employeeID_lte: String
  employeeID_gt: String
  employeeID_gte: String
  employeeID_contains: String
  employeeID_not_contains: String
  employeeID_starts_with: String
  employeeID_not_starts_with: String
  employeeID_ends_with: String
  employeeID_not_ends_with: String
  gdprConsent: Boolean
  gdprConsent_not: Boolean
  mangoWalletId: String
  mangoWalletId_not: String
  mangoWalletId_in: [String!]
  mangoWalletId_not_in: [String!]
  mangoWalletId_lt: String
  mangoWalletId_lte: String
  mangoWalletId_gt: String
  mangoWalletId_gte: String
  mangoWalletId_contains: String
  mangoWalletId_not_contains: String
  mangoWalletId_starts_with: String
  mangoWalletId_not_starts_with: String
  mangoWalletId_ends_with: String
  mangoWalletId_not_ends_with: String
  mangoUserId: String
  mangoUserId_not: String
  mangoUserId_in: [String!]
  mangoUserId_not_in: [String!]
  mangoUserId_lt: String
  mangoUserId_lte: String
  mangoUserId_gt: String
  mangoUserId_gte: String
  mangoUserId_contains: String
  mangoUserId_not_contains: String
  mangoUserId_starts_with: String
  mangoUserId_not_starts_with: String
  mangoUserId_ends_with: String
  mangoUserId_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  employer: EmployerUpdateOneRequiredWithoutUserInput
  firstName: String
  lastName: String
  email: String
  isVerified: Boolean
  phoneNumber: String
  dob: DateTime
  nationality: String
  employmentStartDate: DateTime
  annualSalary: Float
  employeeID: String
  verificationToken: VerificationTokenUpdateOneInput
  gdprConsent: Boolean
  loan: LoanUpdateOneInput
  mangoWalletId: String
  mangoUserId: String
  paymentRequests: PaymentRequestUpdateManyWithoutUserInput
}

input UserUpdateManyDataInput {
  firstName: String
  lastName: String
  email: String
  isVerified: Boolean
  phoneNumber: String
  dob: DateTime
  nationality: String
  employmentStartDate: DateTime
  annualSalary: Float
  employeeID: String
  gdprConsent: Boolean
  mangoWalletId: String
  mangoUserId: String
}

input UserUpdateManyMutationInput {
  firstName: String
  lastName: String
  email: String
  isVerified: Boolean
  phoneNumber: String
  dob: DateTime
  nationality: String
  employmentStartDate: DateTime
  annualSalary: Float
  employeeID: String
  gdprConsent: Boolean
  mangoWalletId: String
  mangoUserId: String
}

input UserUpdateManyWithoutEmployerInput {
  create: [UserCreateWithoutEmployerInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutEmployerInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutEmployerInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredWithoutPaymentRequestsInput {
  create: UserCreateWithoutPaymentRequestsInput
  update: UserUpdateWithoutPaymentRequestsDataInput
  upsert: UserUpsertWithoutPaymentRequestsInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutEmployerDataInput {
  firstName: String
  lastName: String
  email: String
  isVerified: Boolean
  phoneNumber: String
  dob: DateTime
  nationality: String
  employmentStartDate: DateTime
  annualSalary: Float
  employeeID: String
  verificationToken: VerificationTokenUpdateOneInput
  gdprConsent: Boolean
  loan: LoanUpdateOneInput
  mangoWalletId: String
  mangoUserId: String
  paymentRequests: PaymentRequestUpdateManyWithoutUserInput
}

input UserUpdateWithoutPaymentRequestsDataInput {
  employer: EmployerUpdateOneRequiredWithoutUserInput
  firstName: String
  lastName: String
  email: String
  isVerified: Boolean
  phoneNumber: String
  dob: DateTime
  nationality: String
  employmentStartDate: DateTime
  annualSalary: Float
  employeeID: String
  verificationToken: VerificationTokenUpdateOneInput
  gdprConsent: Boolean
  loan: LoanUpdateOneInput
  mangoWalletId: String
  mangoUserId: String
}

input UserUpdateWithWhereUniqueWithoutEmployerInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutEmployerDataInput!
}

input UserUpsertWithoutPaymentRequestsInput {
  update: UserUpdateWithoutPaymentRequestsDataInput!
  create: UserCreateWithoutPaymentRequestsInput!
}

input UserUpsertWithWhereUniqueWithoutEmployerInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutEmployerDataInput!
  create: UserCreateWithoutEmployerInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  employer: EmployerWhereInput
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  isVerified: Boolean
  isVerified_not: Boolean
  phoneNumber: String
  phoneNumber_not: String
  phoneNumber_in: [String!]
  phoneNumber_not_in: [String!]
  phoneNumber_lt: String
  phoneNumber_lte: String
  phoneNumber_gt: String
  phoneNumber_gte: String
  phoneNumber_contains: String
  phoneNumber_not_contains: String
  phoneNumber_starts_with: String
  phoneNumber_not_starts_with: String
  phoneNumber_ends_with: String
  phoneNumber_not_ends_with: String
  dob: DateTime
  dob_not: DateTime
  dob_in: [DateTime!]
  dob_not_in: [DateTime!]
  dob_lt: DateTime
  dob_lte: DateTime
  dob_gt: DateTime
  dob_gte: DateTime
  nationality: String
  nationality_not: String
  nationality_in: [String!]
  nationality_not_in: [String!]
  nationality_lt: String
  nationality_lte: String
  nationality_gt: String
  nationality_gte: String
  nationality_contains: String
  nationality_not_contains: String
  nationality_starts_with: String
  nationality_not_starts_with: String
  nationality_ends_with: String
  nationality_not_ends_with: String
  employmentStartDate: DateTime
  employmentStartDate_not: DateTime
  employmentStartDate_in: [DateTime!]
  employmentStartDate_not_in: [DateTime!]
  employmentStartDate_lt: DateTime
  employmentStartDate_lte: DateTime
  employmentStartDate_gt: DateTime
  employmentStartDate_gte: DateTime
  annualSalary: Float
  annualSalary_not: Float
  annualSalary_in: [Float!]
  annualSalary_not_in: [Float!]
  annualSalary_lt: Float
  annualSalary_lte: Float
  annualSalary_gt: Float
  annualSalary_gte: Float
  employeeID: String
  employeeID_not: String
  employeeID_in: [String!]
  employeeID_not_in: [String!]
  employeeID_lt: String
  employeeID_lte: String
  employeeID_gt: String
  employeeID_gte: String
  employeeID_contains: String
  employeeID_not_contains: String
  employeeID_starts_with: String
  employeeID_not_starts_with: String
  employeeID_ends_with: String
  employeeID_not_ends_with: String
  verificationToken: VerificationTokenWhereInput
  gdprConsent: Boolean
  gdprConsent_not: Boolean
  loan: LoanWhereInput
  mangoWalletId: String
  mangoWalletId_not: String
  mangoWalletId_in: [String!]
  mangoWalletId_not_in: [String!]
  mangoWalletId_lt: String
  mangoWalletId_lte: String
  mangoWalletId_gt: String
  mangoWalletId_gte: String
  mangoWalletId_contains: String
  mangoWalletId_not_contains: String
  mangoWalletId_starts_with: String
  mangoWalletId_not_starts_with: String
  mangoWalletId_ends_with: String
  mangoWalletId_not_ends_with: String
  mangoUserId: String
  mangoUserId_not: String
  mangoUserId_in: [String!]
  mangoUserId_not_in: [String!]
  mangoUserId_lt: String
  mangoUserId_lte: String
  mangoUserId_gt: String
  mangoUserId_gte: String
  mangoUserId_contains: String
  mangoUserId_not_contains: String
  mangoUserId_starts_with: String
  mangoUserId_not_starts_with: String
  mangoUserId_ends_with: String
  mangoUserId_not_ends_with: String
  paymentRequests_every: PaymentRequestWhereInput
  paymentRequests_some: PaymentRequestWhereInput
  paymentRequests_none: PaymentRequestWhereInput
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
  phoneNumber: String
  mangoWalletId: String
  mangoUserId: String
}

type VerificationToken {
  id: ID!
  email: String!
  token: String!
  expiresAt: DateTime!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type VerificationTokenConnection {
  pageInfo: PageInfo!
  edges: [VerificationTokenEdge]!
  aggregate: AggregateVerificationToken!
}

input VerificationTokenCreateInput {
  id: ID
  email: String!
  token: String!
  expiresAt: DateTime!
}

input VerificationTokenCreateOneInput {
  create: VerificationTokenCreateInput
  connect: VerificationTokenWhereUniqueInput
}

type VerificationTokenEdge {
  node: VerificationToken!
  cursor: String!
}

enum VerificationTokenOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  token_ASC
  token_DESC
  expiresAt_ASC
  expiresAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type VerificationTokenPreviousValues {
  id: ID!
  email: String!
  token: String!
  expiresAt: DateTime!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type VerificationTokenSubscriptionPayload {
  mutation: MutationType!
  node: VerificationToken
  updatedFields: [String!]
  previousValues: VerificationTokenPreviousValues
}

input VerificationTokenSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: VerificationTokenWhereInput
  AND: [VerificationTokenSubscriptionWhereInput!]
  OR: [VerificationTokenSubscriptionWhereInput!]
  NOT: [VerificationTokenSubscriptionWhereInput!]
}

input VerificationTokenUpdateDataInput {
  email: String
  token: String
  expiresAt: DateTime
}

input VerificationTokenUpdateInput {
  email: String
  token: String
  expiresAt: DateTime
}

input VerificationTokenUpdateManyMutationInput {
  email: String
  token: String
  expiresAt: DateTime
}

input VerificationTokenUpdateOneInput {
  create: VerificationTokenCreateInput
  update: VerificationTokenUpdateDataInput
  upsert: VerificationTokenUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: VerificationTokenWhereUniqueInput
}

input VerificationTokenUpsertNestedInput {
  update: VerificationTokenUpdateDataInput!
  create: VerificationTokenCreateInput!
}

input VerificationTokenWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  token: String
  token_not: String
  token_in: [String!]
  token_not_in: [String!]
  token_lt: String
  token_lte: String
  token_gt: String
  token_gte: String
  token_contains: String
  token_not_contains: String
  token_starts_with: String
  token_not_starts_with: String
  token_ends_with: String
  token_not_ends_with: String
  expiresAt: DateTime
  expiresAt_not: DateTime
  expiresAt_in: [DateTime!]
  expiresAt_not_in: [DateTime!]
  expiresAt_lt: DateTime
  expiresAt_lte: DateTime
  expiresAt_gt: DateTime
  expiresAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [VerificationTokenWhereInput!]
  OR: [VerificationTokenWhereInput!]
  NOT: [VerificationTokenWhereInput!]
}

input VerificationTokenWhereUniqueInput {
  id: ID
  email: String
  token: String
}
`